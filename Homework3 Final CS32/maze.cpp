//#include <iostream>
//#include <cassert>
//#include <cstdlib>
//using namespace std;
////use 'E' for encountered
//class Coord {
//public:
//	Coord(int rr, int cc) : m_r(rr), m_c(cc) {}
//	int r() const { return m_r; }
//	int c() const { return m_c; }
//private:
//	int m_r;
//	int m_c;
//};

// Return true if there is a path from (sr,sc) to (er,ec)
// through the maze; return false otherwise
bool pathExists(char maze[][10], int sr, int sc, int er, int ec) {
	if (sr == er && sc == ec) {
		return true; //maze solved
	}
	maze[sr][sc] = 'E';
	if (maze[sr + 1][sc] != 'X' && maze[sr + 1][sc] != 'E') { //can move south
		if (pathExists(maze, sr + 1, sc, er, ec)) {
			return true;
		}
	}
	if (maze[sr][sc - 1] != 'X' && maze[sr][sc - 1] != 'E') { //can move west
		if (pathExists(maze, sr, sc-1, er, ec)) {
			return true;
		}
	}
	if (maze[sr - 1][sc] != 'X' && maze[sr - 1][sc] != 'E') { //can move north
		if (pathExists(maze, sr - 1, sc, er, ec)) {
			return true;
		}
	}

	if (maze[sr][sc + 1] != 'X' && maze[sr][sc + 1] != 'E') { //can move east
		if (pathExists(maze, sr, sc+1, er, ec)) {
			return true;
		}
	}
	
	return false;
}

//int main() {
//	// cout << "Calling STACK version" << endl;
//	char maze[10][10] = {
//		{ 'X','X','X','X','X','X','X','X','X','X' },
//		{ 'X','.','.','.','.','X','.','.','.','X' },
//		{ 'X','.','X','X','.','X','X','X','.','X' },
//		{ 'X','X','X','.','.','.','.','X','.','X' },
//		{ 'X','.','X','X','X','.','X','X','X','X' },
//		{ 'X','.','X','.','.','.','X','.','.','X' },
//		{ 'X','.','.','.','X','.','X','.','.','X' },
//		{ 'X','X','X','X','X','.','X','.','X','X' },
//		{ 'X','.','.','.','.','.','.','.','.','X' },
//		{ 'X','X','X','X','X','X','X','X','X','X' }
//	};
//	char maze2[10][10] = {
//		{ 'X','X','X','X','X','X','X','X','X','X' },
//		{ 'X','.','.','.','.','X','.','.','.','X' },
//		{ 'X','.','X','X','.','X','X','X','.','X' },
//		{ 'X','X','X','.','.','.','.','X','.','X' },
//		{ 'X','.','X','X','X','.','X','X','X','X' },
//		{ 'X','.','X','.','.','.','X','.','.','X' },
//		{ 'X','.','.','.','X','.','X','.','.','X' },
//		{ 'X','X','X','X','X','.','X','.','X','X' },
//		{ 'X','.','.','.','.','.','.','.','.','X' },
//		{ 'X','X','X','X','X','X','X','X','X','X' }
//	};
//	char maze3[10][10] = {
//		{ 'X','X','X','X','X','X','X','X','X','X' },
//		{ 'X','.','.','.','.','X','.','.','.','X' },
//		{ 'X','.','X','X','.','X','X','X','.','X' },
//		{ 'X','X','X','.','.','.','.','X','.','X' },
//		{ 'X','.','X','X','X','.','X','X','X','X' },
//		{ 'X','.','X','.','.','.','X','.','.','X' },
//		{ 'X','.','.','.','X','.','X','.','.','X' },
//		{ 'X','X','X','X','X','.','X','.','X','X' },
//		{ 'X','.','.','.','.','.','.','.','.','X' },
//		{ 'X','X','X','X','X','X','X','X','X','X' }
//	};
//	char maze4[10][10] = {
//		{ 'X','X','X','X','X','X','X','X','X','X' },
//		{ 'X','.','.','.','.','X','.','.','.','X' },
//		{ 'X','.','X','X','.','X','X','X','.','X' },
//		{ 'X','X','X','.','.','.','.','X','.','X' },
//		{ 'X','.','X','X','X','.','X','X','X','X' },
//		{ 'X','.','X','.','.','.','X','.','.','X' },
//		{ 'X','.','.','.','X','.','X','.','.','X' },
//		{ 'X','X','X','X','X','.','X','.','X','X' },
//		{ 'X','.','.','.','.','.','.','.','.','X' },
//		{ 'X','X','X','X','X','X','X','X','X','X' }
//	};
//	char maze5[10][10] = {
//		{ 'X','X','X','X','X','X','X','X','X','X' },
//		{ 'X','.','.','.','.','X','.','.','.','X' },
//		{ 'X','.','X','X','.','X','X','X','.','X' },
//		{ 'X','X','X','.','.','.','.','X','.','X' },
//		{ 'X','.','X','X','X','.','X','X','X','X' },
//		{ 'X','.','X','.','.','.','X','.','.','X' },
//		{ 'X','.','.','.','X','.','X','.','.','X' },
//		{ 'X','X','X','X','X','.','X','.','X','X' },
//		{ 'X','.','.','.','.','.','.','.','.','X' },
//		{ 'X','X','X','X','X','X','X','X','X','X' }
//	};
//	char maze6[10][10] = {
//		{ 'X','X','X','X','X','X','X','X','X','X' },
//		{ 'X','.','.','.','.','X','.','.','.','X' },
//		{ 'X','.','X','X','.','X','X','X','.','X' },
//		{ 'X','X','X','.','.','.','.','X','.','X' },
//		{ 'X','.','X','X','X','.','X','X','X','X' },
//		{ 'X','.','X','.','.','.','X','.','.','X' },
//		{ 'X','.','.','.','X','.','X','.','.','X' },
//		{ 'X','X','X','X','X','.','X','.','X','X' },
//		{ 'X','.','.','.','.','.','.','.','.','X' },
//		{ 'X','X','X','X','X','X','X','X','X','X' }
//	};
//	for (int i = 0; i < 10; i++) { //print contents of the maze
//		for (int j = 0; j < 10; j++) {
//			cout << maze[i][j];
//		}
//		cout << endl;
//	}
//	assert(pathExists(maze, 3, 5, 8, 8) == true);
//	assert(pathExists(maze2, 1, 1, 1, 4) == true);
//	assert(pathExists(maze3, 5, 8, 1, 1) == true);
//	assert(pathExists(maze4, 1, 8, 1, 1) == false);
//	assert(pathExists(maze5, 5, 1, 1, 1) == true);
//	assert(pathExists(maze6, 1, 7, 8, 1) == false);
//	
//	char maze7[10][10] = {
//	  { 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X' },
//	  { 'X', '.', 'X', '.', '.', 'X', '.', '.', '.', 'X' },
//	  { 'X', '.', 'X', 'X', '.', 'X', '.', 'X', 'X', 'X' },
//	  { 'X', '.', '.', '.', '.', 'X', '.', 'X', '.', 'X' },
//	  { 'X', 'X', '.', 'X', '.', 'X', '.', '.', '.', 'X' },
//	  { 'X', 'X', 'X', '.', '.', 'X', '.', 'X', '.', 'X' },
//	  { 'X', '.', '.', '.', 'X', '.', '.', '.', 'X', 'X' },
//	  { 'X', '.', 'X', 'X', '.', '.', 'X', '.', 'X', 'X' },
//	  { 'X', '.', '.', '.', '.', 'X', '.', '.', '.', 'X' },
//	  { 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X' },
//	};
//
//	char maze8[10][10] = {
//	  { 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X' },
//	  { 'X', '.', 'X', '.', '.', 'X', '.', '.', '.', 'X' },
//	  { 'X', 'X', 'X', 'X', '.', 'X', '.', 'X', 'X', 'X' },
//	  { 'X', '.', '.', '.', '.', 'X', '.', 'X', '.', 'X' },
//	  { 'X', 'X', '.', 'X', '.', 'X', '.', '.', '.', 'X' },
//	  { 'X', 'X', 'X', '.', '.', 'X', '.', 'X', '.', 'X' },
//	  { 'X', '.', '.', '.', 'X', '.', '.', '.', 'X', 'X' },
//	  { 'X', '.', 'X', 'X', '.', '.', 'X', '.', 'X', 'X' },
//	  { 'X', '.', '.', '.', '.', 'X', '.', '.', '.', 'X' },
//	  { 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X' },
//	};
//
//	char maze9[10][10] = {
//	  { 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X' },
//	  { 'X', 'X', '.', '.', '.', '.', '.', 'X', 'X', 'X' },
//	  { 'X', '.', '.', 'X', 'X', '.', '.', '.', '.', 'X' },
//	  { 'X', '.', '.', '.', 'X', '.', '.', '.', 'X', 'X' },
//	  { 'X', '.', 'X', '.', 'X', 'X', 'X', '.', '.', 'X' },
//	  { 'X', 'X', 'X', 'X', '.', '.', 'X', '.', '.', 'X' },
//	  { 'X', 'X', '.', '.', '.', '.', 'X', '.', '.', 'X' },
//	  { 'X', '.', '.', '.', '.', '.', '.', '.', 'X', 'X' },
//	  { 'X', '.', '.', 'X', 'X', 'X', 'X', 'X', 'X', 'X' },
//	  { 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X' },
//	};
//
//	char maze10[10][10] = {
//	  { 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X' },
//	  { 'X', 'X', '.', '.', '.', '.', '.', 'X', 'X', 'X' },
//	  { 'X', '.', '.', 'X', 'X', '.', '.', '.', '.', 'X' },
//	  { 'X', '.', '.', '.', 'X', '.', '.', '.', 'X', 'X' },
//	  { 'X', '.', 'X', '.', 'X', 'X', 'X', '.', '.', 'X' },
//	  { 'X', 'X', 'X', 'X', '.', '.', 'X', '.', '.', 'X' },
//	  { 'X', 'X', '.', '.', '.', '.', 'X', '.', '.', 'X' },
//	  { 'X', '.', 'X', '.', '.', '.', '.', '.', 'X', 'X' },
//	  { 'X', '.', '.', 'X', 'X', 'X', 'X', 'X', 'X', 'X' },
//	  { 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X' },
//	};
//
//	assert(pathExists(maze7, 8, 6, 1, 1));
//	assert(!pathExists(maze8, 8, 6, 1, 1));
//	assert(pathExists(maze9, 4, 3, 7, 1));
//	assert(!pathExists(maze10, 4, 3, 7, 1));
//	
//	cout << "All tests passed!" << endl;
//	return 0;
//}